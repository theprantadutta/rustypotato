name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

# Add permissions for the workflow
permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag.outputs.tag }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Get tag
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: RustyPotato ${{ steps.tag.outputs.tag }}
        body: |
          ## What's Changed
          
          This release includes performance improvements, bug fixes, and new features.
          
          ### Installation
          
          #### Docker
          ```bash
          docker pull theprantadutta/rustypotato:${{ steps.tag.outputs.tag }}
          ```
          
          #### Pre-built Binaries
          Download the appropriate binary for your platform from the assets below.
          
          #### Build from Source
          ```bash
          git clone https://github.com/theprantadutta/rustypotato.git
          cd rustypotato
          git checkout ${{ steps.tag.outputs.tag }}
          cargo build --release
          ```
          
          ### Checksums
          
          See the `checksums.txt` file for SHA256 checksums of all release assets.
        draft: false
        prerelease: false
        generate_release_notes: true

  build-binaries:
    name: Build Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: rustypotato-linux-x64
            archive: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: rustypotato-linux-arm64
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: rustypotato-windows-x64
            archive: zip
          - os: macos-latest
            target: x86_64-apple-darwin
            name: rustypotato-macos-x64
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            name: rustypotato-macos-arm64
            archive: tar.gz
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build binaries
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Prepare release assets (Unix)
      if: matrix.archive == 'tar.gz'
      run: |
        mkdir -p release/${{ matrix.name }}
        cp target/${{ matrix.target }}/release/rustypotato-server release/${{ matrix.name }}/
        cp target/${{ matrix.target }}/release/rustypotato-cli release/${{ matrix.name }}/
        cp README.md LICENSE-MIT LICENSE-APACHE release/${{ matrix.name }}/
        cd release
        tar -czf ${{ matrix.name }}.tar.gz ${{ matrix.name }}
        # Use shasum on macOS, sha256sum on Linux
        if command -v sha256sum >/dev/null 2>&1; then
          sha256sum ${{ matrix.name }}.tar.gz > ${{ matrix.name }}.tar.gz.sha256
        else
          shasum -a 256 ${{ matrix.name }}.tar.gz > ${{ matrix.name }}.tar.gz.sha256
        fi
    
    - name: Prepare release assets (Windows)
      if: matrix.archive == 'zip'
      run: |
        mkdir release/${{ matrix.name }}
        cp target/${{ matrix.target }}/release/rustypotato-server.exe release/${{ matrix.name }}/
        cp target/${{ matrix.target }}/release/rustypotato-cli.exe release/${{ matrix.name }}/
        cp README.md, LICENSE-MIT, LICENSE-APACHE release/${{ matrix.name }}/
        cd release
        Compress-Archive -Path ${{ matrix.name }} -DestinationPath ${{ matrix.name }}.zip
        $hash = (Get-FileHash ${{ matrix.name }}.zip -Algorithm SHA256).Hash.ToLower()
        "$hash  ${{ matrix.name }}.zip" | Out-File -FilePath ${{ matrix.name }}.zip.sha256 -Encoding ASCII
      shell: powershell
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: |
          ./release/${{ matrix.name }}.${{ matrix.archive }}
          ./release/${{ matrix.name }}.${{ matrix.archive }}.sha256

  build-docker:
    name: Build Docker Images
    needs: create-release
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.meta.outputs.json }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Get tag
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: theprantadutta/rustypotato
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Docker image (no push)
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=image,name=theprantadutta/rustypotato,push=false

  create-checksums:
    name: Create Checksums File
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Create consolidated checksums file
      run: |
        echo "# RustyPotato Release Checksums" > checksums.txt
        echo "" >> checksums.txt
        echo "Generated on: $(date -u)" >> checksums.txt
        echo "Release: ${{ needs.create-release.outputs.tag_name }}" >> checksums.txt
        echo "" >> checksums.txt
        echo "Individual checksum files are available alongside each binary." >> checksums.txt
        echo "This file serves as a reference for all release assets." >> checksums.txt
    
    - name: Upload checksums file
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: ./checksums.txt

  # Publishing jobs - only run after all builds succeed
  push-docker:
    name: Push Docker Images to Hub
    needs: [create-release, build-binaries, build-docker, create-checksums]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Get tag
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: theprantadutta/rustypotato
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-binaries, build-docker, create-checksums]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      continue-on-error: true  # Don't fail if already published

  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-binaries, build-docker, create-checksums]
    runs-on: ubuntu-latest
    steps:
    - name: Update Homebrew formula
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.HOMEBREW_TOKEN }}
        formula: rustypotato
      continue-on-error: true

